seed: 7

# runtype: train
runtype: test

# hash_freeze: True
hash_freeze: False

path_to_outputs: /scratch_net/ken/mcrespo/proj_marina/logs/multivol_11_28_inf

model_checkpoint: /scratch_net/ken/mcrespo/proj_marina/logs/multivol_11_20/2024-11-22_12h36m48s/checkpoints/epoch_0499.pt

dataset:
  path_to_data: /itet-stor/mcrespo/bmicdatasets-originals/Originals/fastMRI/brain/multicoil_train/
  n_volumes: 3
  n_slices: 2
  with_mask: False  # NOTE: During training phase, set to False.
  acceleration: 4
  center_frac: 0.15

dataloader:
  batch_size: 240_000
  pin_memory: False

model:
  id: Siren
  params:
    coord_dim: 3
    vol_embedding_dim: 256
    coil_embedding_dim: 128
    hidden_dim: 512
    levels: 5
    n_features: 3
    n_min: 45
    size_hashtable: 12
    n_layers: 6

loss:
  id: MSEL2
  params:
    gamma: 0.0
    sigma: 0.01

optimizer:
  id: Adam
  params:
    lr: 5.e-6 # The dot is necessary, otherwise the parser will mistake this for a string (and not a float).

scheduler:
  id: StepLR
  params:
    gamma: 1.0
    step_size: 20_000

# Training Process
n_epochs: 1000
log_interval: 100
checkpoint_interval: 1000  # Keep in mind that each checkpoint takes ~241 MB of space.

meta_learning:
  reinit_step: 200
  epsilon: 0.01

###################################################
# INFORMATION ONLY - NO EFFECT ON RUN
###################################################
# The following section is for documentation purposes only.
# It does not affect the actual behavior of the run.
# These values are used solely for Tensorboard output, to help identify run types.
hparam_info:
  # dataset: "undersampled (except center)"
  dataset: "all data (except center)"

  # observation_type: "train sample"
  observation_type: "test sample"

  # regularization: "None"
  # regularization: "layer norm"
  # regularization: "weight norm"
  # regularization: "AdamW (weight decay)"

  coord_encoding: "positional encoding"
  # coord_encoding: "fourier_feat"

  # normalization: "None"
  normalization: "divide by .999 abs quantile"
  # normalization: "divide by max modulus"
  # normalization: ".05 / .95 real and imag parts"
  # normalization: "min/max real and imag parts"